#!/usr/bin/env ruby

require 'onix3'
require 'optitron'
require 'zlib'

class Runner < Optitron::CLI
  
  class_opt "verbose", "Verbose output", :type => :boolean

  desc "Comment an onix 3 file"
  # arg "file", "The file to comment"
  def comment(onix_file)
    io_for_onix(onix_file) do |file|
      p = Onix3::Parser::Divider.new(file)
      puts p.document_start
      c = Onix3::Tools::Commenter.new
      p.each_product do |product|
        puts c.comment(product)
      end
      puts p.document_end
    end
  end

  desc "Update the code lists with an XML description file from http://www.editeur.org/14/Code-Lists/#code%20lists"
  # arg "file", "The XML file with lists data"
  def update_code_lists(code_list_file)
    Onix3::Tools::CodeListUpdater.new.update_with(code_list_file)
  end

  desc "Extract a product definition from an onix 3 file"
  # arg "file", "The onix 3 file"
  # arg "identifier", "Identifier of the product to extract"
  opt "comment", "Comment the returned file", :type => :boolean, :use_no => true
  def extract(onix_file, product_identifier)
    io_for_onix(onix_file) do |file|
      p = Onix3::Parser::Divider.new(file)
      puts p.document_start
      c = Onix3::Tools::Commenter.new
      p.each_product do |product|
        if product.index("<IDValue>#{product_identifier}</IDValue>")
          puts (params["comment"] ? c.comment(product) : product)
        end
      end
      puts p.document_end
    end

  end


  desc "Count products in the onix 3 file"
  # arg "file", "The onix 3 file"
  def count(onix_file)
    io_for_onix(onix_file) do |file|
      p = Onix3::Parser::Divider.new(file)
      count = 0
      p.each_product(false) do
        count += 1
        if params["verbose"]
          if count % 10000 == 0
            $stdout.write " (#{count}) "
          elsif count % 1000 == 0
            $stdout.write "."
          end
        end
      end
      puts "\n" if params["verbose"]
      puts count
    end
  end

protected

  def io_for_onix(onix_file)
    File.open(onix_file, "rb") do |f|
      gzip = (f.read(2) == "\x1f\x8b".b)
      f.rewind
      if gzip
        z = Zlib::GzipReader.new(f, :encoding => 'binary')
        yield z
        z.close
      else
        yield f
      end
    end
  end

=begin
q
  desc "List product identifiers in an onix 3 file" 
  opt "types", "list of identifiers types to report", type: :array
  def list(onix_file)
    File.open(onix_file, "rb") do |file|
      p = Onix3::Parser::Divider.new(file)
      p.each_product do |product|
        #
      end
    end
  end
=end
  


end

Runner.dispatch
